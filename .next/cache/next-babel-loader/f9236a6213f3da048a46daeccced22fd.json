{"ast":null,"code":"var _jsxFileName = \"/Users/carsonbrown/git/react-query/examples/optimistic-updates-typescript/pages/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport axios from 'axios';\nimport { useQuery, useQueryClient, useMutation, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nconst client = new QueryClient();\n\nasync function fetchTodos() {\n  const res = await axios.get('/api/data');\n  return res.data;\n}\n\nfunction useTodos(options) {\n  return useQuery('todos', fetchTodos, options);\n}\n\nfunction TodoCounter() {\n  var _counterQuery$data;\n\n  // subscribe only to changes in the 'data' prop, which will be the\n  // amount of todos because of the select function\n  const counterQuery = useTodos({\n    select: data => data.items.length,\n    notifyOnChangeProps: ['data']\n  });\n  React.useEffect(() => {\n    console.log('rendering counter');\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }, \"TodoCounter: \", (_counterQuery$data = counterQuery.data) !== null && _counterQuery$data !== void 0 ? _counterQuery$data : 0);\n}\n\nfunction Example() {\n  var _queryInfo$error;\n\n  const queryClient = useQueryClient();\n  const [text, setText] = React.useState('');\n\n  const _useTodos = useTodos(),\n        {\n    isFetching\n  } = _useTodos,\n        queryInfo = _objectWithoutProperties(_useTodos, [\"isFetching\"]);\n\n  const addTodoMutation = useMutation(newTodo => axios.post('/api/data', {\n    text: newTodo\n  }), {\n    // When mutate is called:\n    onMutate: async newTodo => {\n      setText(''); // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n\n      await queryClient.cancelQueries('todos'); // Snapshot the previous value\n\n      const previousTodos = queryClient.getQueryData('todos'); // Optimistically update to the new value\n\n      if (previousTodos) {\n        queryClient.setQueryData('todos', _objectSpread({}, previousTodos, {\n          items: [...previousTodos.items, {\n            id: Math.random().toString(),\n            text: newTodo\n          }]\n        }));\n      }\n\n      return {\n        previousTodos\n      };\n    },\n    // If the mutation fails, use the context returned from onMutate to roll back\n    onError: (err, variables, context) => {\n      if (context === null || context === void 0 ? void 0 : context.previousTodos) {\n        queryClient.setQueryData('todos', context.previousTodos);\n      }\n    },\n    // Always refetch after error or success:\n    onSettled: () => {\n      queryClient.invalidateQueries('todos');\n    }\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, \"In this example, new items can be created using a mutation. The new item will be optimistically added to the list in hopes that the server accepts the item. If it does, the list is refetched with the true items from the list. Every now and then, the mutation may fail though. When that happens, the previous list of items is restored and the list is again refetched from the server.\"), __jsx(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      addTodoMutation.mutate(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    onChange: event => setText(event.target.value),\n    value: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    disabled: addTodoMutation.isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Create\")), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), queryInfo.isSuccess && __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Updated At: \", new Date(queryInfo.data.ts).toLocaleTimeString()), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, queryInfo.data.items.map(todo => __jsx(\"li\", {\n    key: todo.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, todo.text))), isFetching && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 26\n    }\n  }, \"Updating in background...\")), queryInfo.isLoading && 'Loading', (_queryInfo$error = queryInfo.error) === null || _queryInfo$error === void 0 ? void 0 : _queryInfo$error.message);\n}\n\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, __jsx(Example, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }), __jsx(TodoCounter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/carsonbrown/git/react-query/examples/optimistic-updates-typescript/pages/index.tsx"],"names":["React","axios","useQuery","useQueryClient","useMutation","QueryClient","QueryClientProvider","ReactQueryDevtools","client","fetchTodos","res","get","data","useTodos","options","TodoCounter","counterQuery","select","items","length","notifyOnChangeProps","useEffect","console","log","Example","queryClient","text","setText","useState","isFetching","queryInfo","addTodoMutation","newTodo","post","onMutate","cancelQueries","previousTodos","getQueryData","setQueryData","id","Math","random","toString","onError","err","variables","context","onSettled","invalidateQueries","e","preventDefault","mutate","event","target","value","isLoading","isSuccess","Date","ts","toLocaleTimeString","map","todo","error","message","App"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport axios, { AxiosError } from 'axios'\n\nimport {\n  useQuery,\n  useQueryClient,\n  useMutation,\n  QueryClient,\n  QueryClientProvider,\n  UseQueryOptions,\n} from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nconst client = new QueryClient()\n\ntype Todos = {\n  items: readonly {\n    id: string\n    text: string\n  }[]\n  ts: number\n}\n\nasync function fetchTodos(): Promise<Todos> {\n  const res = await axios.get('/api/data')\n  return res.data\n}\n\nfunction useTodos<TData = Todos>(\n  options?: UseQueryOptions<Todos, AxiosError, TData>\n) {\n  return useQuery('todos', fetchTodos, options)\n}\n\nfunction TodoCounter() {\n  // subscribe only to changes in the 'data' prop, which will be the\n  // amount of todos because of the select function\n  const counterQuery = useTodos({\n    select: data => data.items.length,\n    notifyOnChangeProps: ['data'],\n  })\n\n  React.useEffect(() => {\n    console.log('rendering counter')\n  })\n\n  return <div>TodoCounter: {counterQuery.data ?? 0}</div>\n}\n\nfunction Example() {\n  const queryClient = useQueryClient()\n  const [text, setText] = React.useState('')\n  const { isFetching, ...queryInfo } = useTodos()\n\n  const addTodoMutation = useMutation(\n    newTodo => axios.post('/api/data', { text: newTodo }),\n    {\n      // When mutate is called:\n      onMutate: async (newTodo: string) => {\n        setText('')\n        // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n        await queryClient.cancelQueries('todos')\n\n        // Snapshot the previous value\n        const previousTodos = queryClient.getQueryData<Todos>('todos')\n\n        // Optimistically update to the new value\n        if (previousTodos) {\n          queryClient.setQueryData<Todos>('todos', {\n            ...previousTodos,\n            items: [\n              ...previousTodos.items,\n              { id: Math.random().toString(), text: newTodo },\n            ],\n          })\n        }\n\n        return { previousTodos }\n      },\n      // If the mutation fails, use the context returned from onMutate to roll back\n      onError: (err, variables, context) => {\n        if (context?.previousTodos) {\n          queryClient.setQueryData<Todos>('todos', context.previousTodos)\n        }\n      },\n      // Always refetch after error or success:\n      onSettled: () => {\n        queryClient.invalidateQueries('todos')\n      },\n    }\n  )\n\n  return (\n    <div>\n      <p>\n        In this example, new items can be created using a mutation. The new item\n        will be optimistically added to the list in hopes that the server\n        accepts the item. If it does, the list is refetched with the true items\n        from the list. Every now and then, the mutation may fail though. When\n        that happens, the previous list of items is restored and the list is\n        again refetched from the server.\n      </p>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          addTodoMutation.mutate(text)\n        }}\n      >\n        <input\n          type=\"text\"\n          onChange={event => setText(event.target.value)}\n          value={text}\n        />\n        <button disabled={addTodoMutation.isLoading}>Create</button>\n      </form>\n      <br />\n      {queryInfo.isSuccess && (\n        <>\n          <div>\n            {/* The type of queryInfo.data will be narrowed because we check for isSuccess first */}\n            Updated At: {new Date(queryInfo.data.ts).toLocaleTimeString()}\n          </div>\n          <ul>\n            {queryInfo.data.items.map(todo => (\n              <li key={todo.id}>{todo.text}</li>\n            ))}\n          </ul>\n          {isFetching && <div>Updating in background...</div>}\n        </>\n      )}\n      {queryInfo.isLoading && 'Loading'}\n      {queryInfo.error?.message}\n    </div>\n  )\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={client}>\n      <Example />\n      <TodoCounter />\n      <ReactQueryDevtools initialIsOpen />\n    </QueryClientProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}