{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"/Users/carsonbrown/git/react-query/examples/optimistic-updates-typescript/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useQuery, useQueryClient, useMutation, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nvar client = new QueryClient();\n\nfunction fetchBool() {\n  return _regeneratorRuntime.async(function fetchBool$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(_Promise.resolve(true));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n}\n\nfunction useBool(options) {\n  return useQuery('bool', fetchBool, options);\n}\n\nfunction Example() {\n  var queryClient = useQueryClient();\n\n  var _useBool = useBool(),\n      boolIsFetching = _useBool.isFetching,\n      boolQueryInfo = _objectWithoutProperties(_useBool, [\"isFetching\"]);\n\n  var boolFlip = function boolFlip(val) {\n    return new _Promise(function (resolve) {\n      return resolve(val);\n    });\n  };\n\n  var addBoolMutation = useMutation(boolFlip, {\n    onSuccess: function onSuccess(data) {\n      console.log('data: ', data);\n      queryClient.setQueryData('bool', data);\n    }\n  });\n\n  var toggleBool = function toggleBool() {\n    return addBoolMutation.mutate(!!!(boolQueryInfo === null || boolQueryInfo === void 0 ? void 0 : boolQueryInfo.data));\n  };\n\n  console.log(boolQueryInfo === null || boolQueryInfo === void 0 ? void 0 : boolQueryInfo.data);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"example: \", \"\".concat(boolQueryInfo.data)), __jsx(\"button\", {\n    onClick: toggleBool,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"toggle\"));\n}\n\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Example, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/carsonbrown/git/react-query/examples/optimistic-updates-typescript/pages/index.tsx"],"names":["React","useQuery","useQueryClient","useMutation","QueryClient","QueryClientProvider","ReactQueryDevtools","client","fetchBool","resolve","useBool","options","Example","queryClient","boolIsFetching","isFetching","boolQueryInfo","boolFlip","val","addBoolMutation","onSuccess","data","console","log","setQueryData","toggleBool","mutate","App"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SACEC,QADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,mBALF,QAOO,aAPP;AAQA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,IAAMC,MAAM,GAAG,IAAIH,WAAJ,EAAf;;AAEA,SAAeI,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACe,SAAQC,OAAR,CAAgB,IAAhB,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASC,OAAT,CAAiBC,OAAjB,EAAkE;AAChE,SAAOV,QAAQ,CAAC,MAAD,EAASO,SAAT,EAAoBG,OAApB,CAAf;AACD;;AAED,SAASC,OAAT,GAAmB;AACjB,MAAMC,WAAW,GAAGX,cAAc,EAAlC;;AADiB,iBAEwCQ,OAAO,EAF/C;AAAA,MAEGI,cAFH,YAETC,UAFS;AAAA,MAEsBC,aAFtB;;AAIjB,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD;AAAA,WAAc,aAAY,UAAAT,OAAO;AAAA,aAAIA,OAAO,CAACS,GAAD,CAAX;AAAA,KAAnB,CAAd;AAAA,GAAjB;;AACA,MAAMC,eAAe,GAAGhB,WAAW,CAACc,QAAD,EAAW;AAC5CG,IAAAA,SAAS,EAAE,mBAAAC,IAAI,EAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AACAR,MAAAA,WAAW,CAACW,YAAZ,CAAyB,MAAzB,EAAiCH,IAAjC;AACD;AAJ2C,GAAX,CAAnC;;AAMA,MAAMI,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAMN,eAAe,CAACO,MAAhB,CAAuB,CAAC,CAAC,EAACV,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEK,IAAhB,CAAzB,CAAN;AAAA,GAAnB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ,aAAYA,aAAZ,uBAAYA,aAAa,CAAEK,IAA3B;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAkBL,aAAa,CAACK,IAAhC,EADF,EAEE;AAAQ,IAAA,OAAO,EAAEI,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CADF;AAMD;;AAED,eAAe,SAASE,GAAT,GAAe;AAC5B,SACE,MAAC,mBAAD;AAAqB,IAAA,MAAM,EAAEpB,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,kBAAD;AAAoB,IAAA,aAAa,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD","sourcesContent":["import * as React from 'react'\nimport { AxiosError } from 'axios'\n\nimport {\n  useQuery,\n  useQueryClient,\n  useMutation,\n  QueryClient,\n  QueryClientProvider,\n  UseQueryOptions,\n} from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nconst client = new QueryClient()\n\nasync function fetchBool(): Promise<boolean> {\n  return await Promise.resolve(true)\n}\n\nfunction useBool(options?: UseQueryOptions<any, AxiosError, any>) {\n  return useQuery('bool', fetchBool, options)\n}\n\nfunction Example() {\n  const queryClient = useQueryClient()\n  const { isFetching: boolIsFetching, ...boolQueryInfo } = useBool()\n\n  const boolFlip = (val: any) => new Promise(resolve => resolve(val))\n  const addBoolMutation = useMutation(boolFlip, {\n    onSuccess: data => {\n      console.log('data: ', data)\n      queryClient.setQueryData('bool', data)\n    },\n  })\n  const toggleBool = () => addBoolMutation.mutate(!!!boolQueryInfo?.data)\n  console.log(boolQueryInfo?.data)\n  return (\n    <div>\n      <div>example: {`${boolQueryInfo.data}`}</div>\n      <button onClick={toggleBool}>toggle</button>\n    </div>\n  )\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={client}>\n      <Example />\n      <ReactQueryDevtools initialIsOpen />\n    </QueryClientProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}