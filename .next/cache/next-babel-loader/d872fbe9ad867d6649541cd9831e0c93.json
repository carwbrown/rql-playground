{"ast":null,"code":"var _jsxFileName = \"/Users/carsonbrown/git/react-query/examples/optimistic-updates-typescript/pages/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport axios from 'axios';\nimport { useQuery, useQueryClient, useMutation, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nconst client = new QueryClient();\n\nasync function fetchTodos() {\n  const res = await axios.get('/api/data');\n  return res.data;\n}\n\nfunction useTodos(options) {\n  return useQuery('todos', fetchTodos, options);\n}\n\nasync function fetchBool() {\n  return await Promise.resolve(true);\n}\n\nfunction useBool(options) {\n  return useQuery('bool', fetchBool, options);\n}\n\nfunction TodoCounter() {\n  var _counterQuery$data;\n\n  // subscribe only to changes in the 'data' prop, which will be the\n  // amount of todos because of the select function\n  const counterQuery = useTodos({\n    select: data => data.items.length,\n    notifyOnChangeProps: ['data']\n  });\n  React.useEffect(() => {\n    console.log('rendering counter');\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 10\n    }\n  }, \"TodoCounter: \", (_counterQuery$data = counterQuery.data) !== null && _counterQuery$data !== void 0 ? _counterQuery$data : 0);\n}\n\nfunction Example() {\n  var _queryInfo$error;\n\n  const queryClient = useQueryClient();\n  const [text, setText] = React.useState('');\n\n  const _useTodos = useTodos(),\n        {\n    isFetching\n  } = _useTodos,\n        queryInfo = _objectWithoutProperties(_useTodos, [\"isFetching\"]);\n\n  const _useBool = useBool(),\n        {\n    isFetching: boolIsFetching\n  } = _useBool,\n        boolQueryInfo = _objectWithoutProperties(_useBool, [\"isFetching\"]);\n\n  const addTodoMutation = useMutation(newTodo => axios.post('/api/data', {\n    text: newTodo\n  }), {\n    // When mutate is called:\n    onMutate: async newTodo => {\n      setText(''); // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n\n      await queryClient.cancelQueries('todos'); // Snapshot the previous value\n\n      const previousTodos = queryClient.getQueryData('todos'); // Optimistically update to the new value\n\n      if (previousTodos) {\n        queryClient.setQueryData('todos', _objectSpread({}, previousTodos, {\n          items: [...previousTodos.items, {\n            id: Math.random().toString(),\n            text: newTodo\n          }]\n        }));\n      }\n\n      return {\n        previousTodos\n      };\n    },\n    // If the mutation fails, use the context returned from onMutate to roll back\n    onError: (err, variables, context) => {\n      if (context === null || context === void 0 ? void 0 : context.previousTodos) {\n        queryClient.setQueryData('todos', context.previousTodos);\n      }\n    },\n    // Always refetch after error or success:\n    onSettled: () => {\n      queryClient.invalidateQueries('todos');\n    }\n  });\n\n  const boolFlip = val => new Promise(resolve => resolve(val));\n\n  const addBoolMutation = useMutation(boolFlip, {\n    onSuccess: (data, variables) => {\n      console.log(data);\n      console.log(variables);\n    }\n  });\n\n  const toggleBool = () => addBoolMutation.mutate(!!(boolQueryInfo === null || boolQueryInfo === void 0 ? void 0 : boolQueryInfo.data));\n\n  console.log(boolQueryInfo === null || boolQueryInfo === void 0 ? void 0 : boolQueryInfo.data);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, \"example: \", `${boolQueryInfo.data}`), __jsx(\"button\", {\n    onClick: toggleBool,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"toggle\"), __jsx(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      addTodoMutation.mutate(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    onChange: event => setText(event.target.value),\n    value: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    disabled: addTodoMutation.isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, \"Create\")), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), queryInfo.isSuccess && __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, \"Updated At: \", new Date(queryInfo.data.ts).toLocaleTimeString()), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, queryInfo.data.items.map(todo => __jsx(\"li\", {\n    key: todo.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, todo.text))), isFetching && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 26\n    }\n  }, \"Updating in background...\")), queryInfo.isLoading && 'Loading', (_queryInfo$error = queryInfo.error) === null || _queryInfo$error === void 0 ? void 0 : _queryInfo$error.message);\n}\n\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, __jsx(Example, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }), __jsx(TodoCounter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/carsonbrown/git/react-query/examples/optimistic-updates-typescript/pages/index.tsx"],"names":["React","axios","useQuery","useQueryClient","useMutation","QueryClient","QueryClientProvider","ReactQueryDevtools","client","fetchTodos","res","get","data","useTodos","options","fetchBool","Promise","resolve","useBool","TodoCounter","counterQuery","select","items","length","notifyOnChangeProps","useEffect","console","log","Example","queryClient","text","setText","useState","isFetching","queryInfo","boolIsFetching","boolQueryInfo","addTodoMutation","newTodo","post","onMutate","cancelQueries","previousTodos","getQueryData","setQueryData","id","Math","random","toString","onError","err","variables","context","onSettled","invalidateQueries","boolFlip","val","addBoolMutation","onSuccess","toggleBool","mutate","e","preventDefault","event","target","value","isLoading","isSuccess","Date","ts","toLocaleTimeString","map","todo","error","message","App"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport axios, { AxiosError } from 'axios'\n\nimport {\n  useQuery,\n  useQueryClient,\n  useMutation,\n  QueryClient,\n  QueryClientProvider,\n  UseQueryOptions,\n} from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nconst client = new QueryClient()\n\ntype Todos = {\n  items: readonly {\n    id: string\n    text: string\n  }[]\n  ts: number\n}\n\nasync function fetchTodos(): Promise<Todos> {\n  const res = await axios.get('/api/data')\n  return res.data\n}\n\nfunction useTodos<TData = Todos>(\n  options?: UseQueryOptions<Todos, AxiosError, TData>\n) {\n  return useQuery('todos', fetchTodos, options)\n}\n\nasync function fetchBool(): Promise<boolean> {\n  return await Promise.resolve(true)\n}\n\nfunction useBool(options?: UseQueryOptions<any, AxiosError, any>) {\n  return useQuery('bool', fetchBool, options)\n}\n\nfunction TodoCounter() {\n  // subscribe only to changes in the 'data' prop, which will be the\n  // amount of todos because of the select function\n  const counterQuery = useTodos({\n    select: data => data.items.length,\n    notifyOnChangeProps: ['data'],\n  })\n\n  React.useEffect(() => {\n    console.log('rendering counter')\n  })\n\n  return <div>TodoCounter: {counterQuery.data ?? 0}</div>\n}\n\nfunction Example() {\n  const queryClient = useQueryClient()\n  const [text, setText] = React.useState('')\n  const { isFetching, ...queryInfo } = useTodos()\n  const { isFetching: boolIsFetching, ...boolQueryInfo } = useBool()\n\n  const addTodoMutation = useMutation(\n    newTodo => axios.post('/api/data', { text: newTodo }),\n    {\n      // When mutate is called:\n      onMutate: async (newTodo: string) => {\n        setText('')\n        // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n        await queryClient.cancelQueries('todos')\n\n        // Snapshot the previous value\n        const previousTodos = queryClient.getQueryData<Todos>('todos')\n\n        // Optimistically update to the new value\n        if (previousTodos) {\n          queryClient.setQueryData<Todos>('todos', {\n            ...previousTodos,\n            items: [\n              ...previousTodos.items,\n              { id: Math.random().toString(), text: newTodo },\n            ],\n          })\n        }\n\n        return { previousTodos }\n      },\n      // If the mutation fails, use the context returned from onMutate to roll back\n      onError: (err, variables, context) => {\n        if (context?.previousTodos) {\n          queryClient.setQueryData<Todos>('todos', context.previousTodos)\n        }\n      },\n      // Always refetch after error or success:\n      onSettled: () => {\n        queryClient.invalidateQueries('todos')\n      },\n    }\n  )\n  const boolFlip = (val: any) => new Promise(resolve => resolve(val))\n  const addBoolMutation = useMutation(boolFlip, {\n    onSuccess: (data, variables) => {\n      console.log(data)\n      console.log(variables)\n    },\n  })\n  const toggleBool = () => addBoolMutation.mutate(!!boolQueryInfo?.data)\n  console.log(boolQueryInfo?.data)\n  return (\n    <div>\n      <div>example: {`${boolQueryInfo.data}`}</div>\n      <button onClick={toggleBool}>toggle</button>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          addTodoMutation.mutate(text)\n        }}\n      >\n        <input\n          type=\"text\"\n          onChange={event => setText(event.target.value)}\n          value={text}\n        />\n        <button disabled={addTodoMutation.isLoading}>Create</button>\n      </form>\n      <br />\n      {queryInfo.isSuccess && (\n        <>\n          <div>\n            {/* The type of queryInfo.data will be narrowed because we check for isSuccess first */}\n            Updated At: {new Date(queryInfo.data.ts).toLocaleTimeString()}\n          </div>\n          <ul>\n            {queryInfo.data.items.map(todo => (\n              <li key={todo.id}>{todo.text}</li>\n            ))}\n          </ul>\n          {isFetching && <div>Updating in background...</div>}\n        </>\n      )}\n      {queryInfo.isLoading && 'Loading'}\n      {queryInfo.error?.message}\n    </div>\n  )\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={client}>\n      <Example />\n      <TodoCounter />\n      <ReactQueryDevtools initialIsOpen />\n    </QueryClientProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}