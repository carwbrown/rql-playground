{"ast":null,"code":"var _jsxFileName = \"/Users/carsonbrown/git/react-query/examples/optimistic-updates-typescript/pages/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { useQuery, useQueryClient, useMutation, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nconst client = new QueryClient(); // initial call returns true\n\nasync function fetchBool() {\n  return await Promise.resolve(true);\n} // hook to get the value stored at the 'bool' key\n\n\nfunction useBool(options) {\n  return useQuery('bool', fetchBool, options);\n}\n\nfunction Example() {\n  const queryClient = useQueryClient();\n\n  const _useBool = useBool(),\n        {\n    isFetching: boolIsFetching\n  } = _useBool,\n        boolQueryInfo = _objectWithoutProperties(_useBool, [\"isFetching\"]); // take a value and resolve that value\n  // on success set the query data of the 'bool' index to be the passed value\n\n\n  const boolFlip = val => new Promise(resolve => resolve(val));\n\n  const addBoolMutation = useMutation(boolFlip, {\n    onSuccess: data => {\n      console.log('data: ', data);\n      queryClient.setQueryData('bool', data);\n    }\n  }); // function that calls the flip mutation\n\n  const toggleBool = () => addBoolMutation.mutate(!!!(boolQueryInfo === null || boolQueryInfo === void 0 ? void 0 : boolQueryInfo.data));\n\n  console.log(boolQueryInfo === null || boolQueryInfo === void 0 ? void 0 : boolQueryInfo.data);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"example: \", `${boolQueryInfo.data}`), __jsx(\"button\", {\n    onClick: toggleBool,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"toggle\"));\n}\n\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(Example, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/carsonbrown/git/react-query/examples/optimistic-updates-typescript/pages/index.tsx"],"names":["React","useQuery","useQueryClient","useMutation","QueryClient","QueryClientProvider","ReactQueryDevtools","client","fetchBool","Promise","resolve","useBool","options","Example","queryClient","isFetching","boolIsFetching","boolQueryInfo","boolFlip","val","addBoolMutation","onSuccess","data","console","log","setQueryData","toggleBool","mutate","App"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SACEC,QADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,mBALF,QAOO,aAPP;AAQA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,MAAMC,MAAM,GAAG,IAAIH,WAAJ,EAAf,C,CAEA;;AACA,eAAeI,SAAf,GAA6C;AAC3C,SAAO,MAAMC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAb;AACD,C,CAED;;;AACA,SAASC,OAAT,CAAiBC,OAAjB,EAAkE;AAChE,SAAOX,QAAQ,CAAC,MAAD,EAASO,SAAT,EAAoBI,OAApB,CAAf;AACD;;AAED,SAASC,OAAT,GAAmB;AACjB,QAAMC,WAAW,GAAGZ,cAAc,EAAlC;;AACA,mBAAyDS,OAAO,EAAhE;AAAA,QAAM;AAAEI,IAAAA,UAAU,EAAEC;AAAd,GAAN;AAAA,QAAuCC,aAAvC,sDAFiB,CAIjB;AACA;;;AACA,QAAMC,QAAQ,GAAIC,GAAD,IAAc,IAAIV,OAAJ,CAAYC,OAAO,IAAIA,OAAO,CAACS,GAAD,CAA9B,CAA/B;;AACA,QAAMC,eAAe,GAAGjB,WAAW,CAACe,QAAD,EAAW;AAC5CG,IAAAA,SAAS,EAAEC,IAAI,IAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AACAR,MAAAA,WAAW,CAACW,YAAZ,CAAyB,MAAzB,EAAiCH,IAAjC;AACD;AAJ2C,GAAX,CAAnC,CAPiB,CAcjB;;AACA,QAAMI,UAAU,GAAG,MAAMN,eAAe,CAACO,MAAhB,CAAuB,CAAC,CAAC,EAACV,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEK,IAAhB,CAAzB,CAAzB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ,aAAYA,aAAZ,uBAAYA,aAAa,CAAEK,IAA3B;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgB,GAAEL,aAAa,CAACK,IAAK,EAArC,CADF,EAEE;AAAQ,IAAA,OAAO,EAAEI,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CADF;AAMD;;AAED,eAAe,SAASE,GAAT,GAAe;AAC5B,SACE,MAAC,mBAAD;AAAqB,IAAA,MAAM,EAAErB,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,kBAAD;AAAoB,IAAA,aAAa,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD","sourcesContent":["import * as React from 'react'\nimport { AxiosError } from 'axios'\n\nimport {\n  useQuery,\n  useQueryClient,\n  useMutation,\n  QueryClient,\n  QueryClientProvider,\n  UseQueryOptions,\n} from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nconst client = new QueryClient()\n\n// initial call returns true\nasync function fetchBool(): Promise<boolean> {\n  return await Promise.resolve(true)\n}\n\n// hook to get the value stored at the 'bool' key\nfunction useBool(options?: UseQueryOptions<any, AxiosError, any>) {\n  return useQuery('bool', fetchBool, options)\n}\n\nfunction Example() {\n  const queryClient = useQueryClient()\n  const { isFetching: boolIsFetching, ...boolQueryInfo } = useBool()\n\n  // take a value and resolve that value\n  // on success set the query data of the 'bool' index to be the passed value\n  const boolFlip = (val: any) => new Promise(resolve => resolve(val))\n  const addBoolMutation = useMutation(boolFlip, {\n    onSuccess: data => {\n      console.log('data: ', data)\n      queryClient.setQueryData('bool', data)\n    },\n  })\n\n  // function that calls the flip mutation\n  const toggleBool = () => addBoolMutation.mutate(!!!boolQueryInfo?.data)\n  console.log(boolQueryInfo?.data)\n  return (\n    <div>\n      <div>example: {`${boolQueryInfo.data}`}</div>\n      <button onClick={toggleBool}>toggle</button>\n    </div>\n  )\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={client}>\n      <Example />\n      <ReactQueryDevtools initialIsOpen />\n    </QueryClientProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}